datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  username        String            @unique
  displayName     String?           @db.VarChar(120)
  bio             String?           @db.Text
  password        String            @db.VarChar(255)
  createAt        DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  session         Session[]         @relation("Login")
  writeThread     Thread[]          @relation("WriterThread")
  commentThread   CommentThread[]   @relation("CommentThread")
  likeThread      LikeThread[]      @relation("LikeThread")
  saveThread      SaveThread[]      @relation("SaveThread")
  ShowCase        ShowCase[]
  LikeShowCase    LikeShowCase[]
  SaveShowCase    SaveShowCase[]
  CommentShowCase CommentShowCase[]
  viewThread      ViewThread[]
  viewShowcase    ViewShowcase[]
  Notifications   Notifications[]
}

enum NotifStatus {
  Like
  Comment
}

model Notifications {
  id           String      @id @default(uuid())
  isView       Boolean     @default(false)
  createAt     DateTime    @default(now())
  updateAt     DateTime    @updatedAt
  notifBy      User        @relation(fields: [userNotif], references: [id])
  userNotif    String
  targetId     String
  targetThread Thread?     @relation(fields: [threadId], references: [id])
  threadId     String?
  targetShow   ShowCase?   @relation(fields: [showId], references: [id])
  showId       String?
  status       NotifStatus
  description  String?
}

model Session {
  id       String   @id @default(uuid())
  token    String   @default(uuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   String
  loginBy  User     @relation("Login", fields: [userId], references: [id])
}

model Thread {
  id            String          @id @default(uuid())
  description   String          @db.Text
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  authorId      String
  author        User            @relation("WriterThread", fields: [authorId], references: [id])
  commentThread CommentThread[]
  likeThread    LikeThread[]
  saveThread    SaveThread[]
  viewThread    ViewThread[]
  Notifications Notifications[]
}

model ViewThread {
  id       String  @id @default(uuid())
  threadId String?
  thread   Thread? @relation(fields: [threadId], references: [id])
  userId   String?
  viewBy   User?   @relation(fields: [userId], references: [id])
}

model LikeThread {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  threadId String?
  userId   String?
  thread   Thread?  @relation(fields: [threadId], references: [id])
  likeBy   User?    @relation("LikeThread", fields: [userId], references: [id])
}

model SaveThread {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  threadId String?
  userId   String?
  thread   Thread?  @relation(fields: [threadId], references: [id])
  saveBy   User?    @relation("SaveThread", fields: [userId], references: [id])
}

model CommentThread {
  id          String   @id @default(uuid())
  description String   @db.Text
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  thread      Thread?  @relation(fields: [threadId], references: [id])
  threadId    String?
  commentBy   User?    @relation("CommentThread", fields: [userId], references: [id])
  userId      String?
}

model ShowCase {
  id              String            @id @default(uuid())
  title           String            @db.VarChar(255)
  description     String            @db.Text
  slug            String            @unique
  createAt        DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  authorShowCase  User?             @relation(fields: [authorId], references: [id])
  authorId        String?
  commentShowCase CommentShowCase[]
  likeShowCase    LikeShowCase[]
  saveShowCase    SaveShowCase[]
  viewShowcase    ViewShowcase[]
  Notifications   Notifications[]
}

model LikeShowCase {
  id         String    @id @default(uuid())
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  showCaseId String?
  userId     String?
  showCase   ShowCase? @relation(fields: [showCaseId], references: [id])
  likeBy     User?     @relation(fields: [userId], references: [id])
}

model SaveShowCase {
  id         String    @id @default(uuid())
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  showCaseId String?
  userId     String?
  showCase   ShowCase? @relation(fields: [showCaseId], references: [id])
  saveBy     User?     @relation(fields: [userId], references: [id])
}

model CommentShowCase {
  id          String    @id @default(uuid())
  description String    @db.Text
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  showCase    ShowCase? @relation(fields: [showCaseId], references: [id])
  showCaseId  String?
  commentBy   User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model ViewShowcase {
  id         String    @id @default(uuid())
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  showcaseId String?
  showcase   ShowCase? @relation(fields: [showcaseId], references: [id])
  userId     String?
  viewBy     User?     @relation(fields: [userId], references: [id])
}
